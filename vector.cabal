Name:           vector
Version:        0.11.0.0
-- don't forget to update the changelog file!
License:        BSD3
License-File:   LICENSE
Author:         Roman Leshchinskiy <rl@cse.unsw.edu.au>
Maintainer:     Roman Leshchinskiy <rl@cse.unsw.edu.au>
Copyright:      (c) Roman Leshchinskiy 2008-2012
Homepage:       https://github.com/haskell/vector
Bug-Reports:    https://github.com/haskell/vector/issues
Category:       Data, Data Structures
Synopsis:       Efficient Arrays
Description:
        .
        An efficient implementation of Int-indexed arrays (both mutable
        and immutable), with a powerful loop optimisation framework .
        .
        It is structured as follows:
        .
        ["Data.Vector"] Boxed vectors of arbitrary types.
        .
        ["Data.Vector.Unboxed"] Unboxed vectors with an adaptive
        representation based on data type families.
        .
        ["Data.Vector.Storable"] Unboxed vectors of 'Storable' types.
        .
        ["Data.Vector.Primitive"] Unboxed vectors of primitive types as
        defined by the @primitive@ package. "Data.Vector.Unboxed" is more
        flexible at no performance cost.
        .
        ["Data.Vector.Generic"] Generic interface to the vector types.
        .
        There is also a (draft) tutorial on common uses of vector.
        .
        * <http://haskell.org/haskellwiki/Numeric_Haskell:_A_Vector_Tutorial>

Cabal-Version:  >=1.10
Build-Type:     Simple

Extra-Source-Files:
      README.md
      benchmarks/vector-benchmarks.cabal
      benchmarks/LICENSE
      benchmarks/Setup.hs
      benchmarks/Main.hs
      benchmarks/Algo/AwShCC.hs
      benchmarks/Algo/HybCC.hs
      benchmarks/Algo/Leaffix.hs
      benchmarks/Algo/ListRank.hs
      benchmarks/Algo/Quickhull.hs
      benchmarks/Algo/Rootfix.hs
      benchmarks/Algo/Spectral.hs
      benchmarks/Algo/Tridiag.hs
      benchmarks/TestData/Graph.hs
      benchmarks/TestData/ParenTree.hs
      benchmarks/TestData/Random.hs
      changelog
      internal/GenUnboxTuple.hs
      internal/unbox-tuple-instances

Flag BoundsChecks
  Description: Enable bounds checking
  Default: True

Flag UnsafeChecks
  Description: Enable bounds checking in unsafe operations at the cost of a
               significant performance penalty
  Default: False

Flag InternalChecks
  Description: Enable internal consistency checks at the cost of a
               significant performance penalty
  Default: False


Library
  Default-Language: Haskell2010
  Other-Extensions:
        BangPatterns
        CPP
        DeriveDataTypeable
        ExistentialQuantification
        FlexibleContexts
        FlexibleInstances
        GADTs
        KindSignatures
        MagicHash
        MultiParamTypeClasses
        Rank2Types
        ScopedTypeVariables
        StandaloneDeriving
        TypeFamilies

  Exposed-Modules:
        Data.Vector.Internal.Check

        Data.Vector.Fusion.Util
        Data.Vector.Fusion.Stream.Monadic
        Data.Vector.Fusion.Bundle.Size
        Data.Vector.Fusion.Bundle.Monadic
        Data.Vector.Fusion.Bundle

        Data.Vector.Generic.Mutable.Base
        Data.Vector.Generic.Mutable
        Data.Vector.Generic.Base
        Data.Vector.Generic.New
        Data.Vector.Generic

        Data.Vector.Primitive.Mutable
        Data.Vector.Primitive

        Data.Vector.Storable.Internal
        Data.Vector.Storable.Mutable
        Data.Vector.Storable

        Data.Vector.Unboxed.Base
        Data.Vector.Unboxed.Mutable
        Data.Vector.Unboxed

        Data.Vector.Mutable
        Data.Vector

  Include-Dirs:
        include, internal

  Install-Includes:
        vector.h

  Build-Depends: base >= 4.3 && < 4.8
               , primitive >= 0.5.0.1 && < 0.6
               , ghc-prim >= 0.2 && < 0.4
               , deepseq >= 1.1 && < 1.4

  Ghc-Options: -O2

  if flag(BoundsChecks)
    cpp-options: -DVECTOR_BOUNDS_CHECKS

  if flag(UnsafeChecks)
    cpp-options: -DVECTOR_UNSAFE_CHECKS

  if flag(InternalChecks)
    cpp-options: -DVECTOR_INTERNAL_CHECKS

source-repository head
  type:     git
  location: https://github.com/haskell/vector.git


-- We have two variants of test suite which are identical in every
-- respect except they use different optmization levels
Test-suite test-O0
  type:             exitcode-stdio-1.0
  Default-Language: Haskell2010
  hs-source-dirs:   tests
  main-is:          Main.hs
  other-modules:
        Tests.Bundle,
        Tests.Move,
        Tests.Vector,
        Boilerplater
        Utilities
  Default-Extensions: CPP,
              ScopedTypeVariables,
              PatternGuards,
              MultiParamTypeClasses,
              FlexibleContexts,
              Rank2Types,
              TypeSynonymInstances,
              TypeFamilies,
              TemplateHaskell
  Ghc-Options: -O0
  Ghc-Options: -Wall -fno-warn-orphans -fno-warn-missing-signatures
  build-depends: base    >= 4 && < 5
               , vector  >= 0.11
               , template-haskell
               , random
               , QuickCheck >= 2
               , test-framework
               , test-framework-quickcheck2

Test-suite test-O2
  type:             exitcode-stdio-1.0
  Default-Language: Haskell2010
  hs-source-dirs:   tests
  main-is:          Main.hs
  other-modules:
        Tests.Bundle,
        Tests.Move,
        Tests.Vector,
        Boilerplater,
        Utilities
  Default-Extensions: CPP,
              ScopedTypeVariables,
              PatternGuards,
              MultiParamTypeClasses,
              FlexibleContexts,
              Rank2Types,
              TypeSynonymInstances,
              TypeFamilies,
              TemplateHaskell
  Ghc-Options: -O2
  Ghc-Options: -Wall -fno-warn-orphans -fno-warn-missing-signatures
  build-depends: base    >= 4 && < 5
               , vector  >= 0.11
               , template-haskell
               , random
               , QuickCheck >= 2
               , test-framework
               , test-framework-quickcheck2
